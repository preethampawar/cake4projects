<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Datasource\ConnectionManager;
use Cake\Event\EventInterface;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/4/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();

        $this->loadComponent('RequestHandler');
        $this->loadComponent('Flash');

        /*
         * Enable the following component for recommended CakePHP form protection settings.
         * see https://book.cakephp.org/4/en/controllers/components/form-protection.html
         */
        //$this->loadComponent('FormProtection');
    }

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        if (
            $this->request->getParam('action') !== 'login'
            && $this->request->getParam('action') !== 'register'
            && ($this->request->getParam('controller') == 'UserExams' && $this->request->getParam('action') !== 'list')
            && ($this->request->getParam('controller') == 'UserExams' && $this->request->getParam('action') !== 'select')
            && $this->request->getSession()->check('User.id') !== true) {
            $this->redirect('/users/login');
            return;
        }

        $this->setLayout();
    }

    protected function getDbConnection()
    {
        return ConnectionManager::get('default');
    }

    protected function query($query)
    {
        return $this->getDbConnection()
            ->execute($query)
            ->fetchAll('assoc');
    }

    public function isAdmin()
    {
        if($this->request->getSession()->check('User.isAdmin') == true) {
           return $this->request->getSession()->read('User.isAdmin') == true;
        }

        return false;
    }

    public function allowAdmin()
    {
        if (! $this->isAdmin()) {
            $this->Flash->error('You are not authorized to access this page');
            $this->redirect('/');
        }
    }

    protected function setLayout($layout = null)
    {
        if ($layout !== null) {
            $this->viewBuilder()->setLayout($layout);
            return;
        }

        if ($this->isAdmin()) {
            $this->viewBuilder()->setLayout('admin');
            return;
        }

        $this->viewBuilder()->setLayout('default');
    }

    // all cache keys
    protected function getExamCacheKey($examId = null)
    {
        return 'exam'.$examId;
    }

    protected function getExamsCacheKey($categoryId = null)
    {
        return 'examsList'.$categoryId;
    }

    protected function getAllCategoriesCacheKey()
    {
        return 'allCategories';
    }

    protected function getUserExamCacheKey($userExamId)
    {
        return 'userExam'.$userExamId;
    }
    protected function getUserExamSelectedQACacheKey($userExamId)
    {
        return 'userExamSelectedQA'.$userExamId;
    }
}
